- name: Check for already existing secret key
  shell: "gpg --list-secret-keys | grep '{{ caur_sign_realname }}'"
  become: yes
  become_user: "{{ caur_sign_user }}"
  changed_when: false
  ignore_errors: true
  no_log: "{{ gpg_no_log }}"
  register: gpgkeys
- name: Ensure ~/.gnupg directory exists with right permissions
  file:
    dest: "{{ caur_sign_user_home }}/.gnupg"
    mode: 0700
    owner: "{{ caur_sign_user }}"
    state: directory
- name: Set defaut GPG options
  template:
    dest: "{{ caur_sign_user_home }}/.gnupg/gpg.conf"
    mode: 0600
    owner: "{{ caur_sign_user }}"
    src: gpg.conf.j2
- name: Copy default template for GPG key generation
  template:
    dest: "{{ caur_sign_user_home }}/.gnupg/gen-key-script-{{ caur_sign_user }}"
    mode: 0600
    owner: "{{ caur_sign_user }}"
    src: gen-key-script.j2
  when: gpgkeys is defined and not gpgkeys.stdout
- name: Generate new GPG key
  command: "gpg --batch --gen-key {{ caur_sign_user_home }}/.gnupg/gen-key-script-{{ caur_sign_user }}"
  args:
    chdir: "{{ caur_sign_user_home }}"
  become: yes
  become_user: "{{ caur_sign_user }}"
  no_log: "{{ gpg_no_log }}"
  register: genkey
  when: gpgkeys is defined and not gpgkeys.stdout
- name: Import just generated keys
  command: "gpg --import {{ caur_sign_user_home }}/{{ gpg_pubkeyfile }}"
  become: yes
  become_user: "{{ caur_sign_user }}"
  when: gpgkeys is defined and not gpgkeys.stdout
- name: Get user GPG fingerprint
  shell: |
    set -o pipefail
    gpg --list-keys --keyid-format LONG {{ gpg_useremail }} | awk -F'[ /]' '/sub/ { print $5 }' | tee {{ caur_sign_user_home }}/{{ gpg_fingerprint }}
  args:
    executable: /bin/bash
    creates: "{{ caur_sign_user_home }}/{{ gpg_fingerprint }}"
  become: yes
  become_user: "{{ caur_sign_user }}"
  register: caur_sign_user_fingerprint
  when: gpgkeys is defined and not gpgkeys.stdout
- name: Send the GPG key to keyservers
  shell: gpg --send-keys {{ caur_sign_user_fingerprint.stdout }}
  become: yes
  become_user: "{{ caur_sign_user }}"
  when: gpgkeys is defined and not gpgkeys.stdout
- name: Get user armored public key
  shell: "gpg --export -a {{gpg_useremail }} > {{ caur_sign_user_home }}/{{ gpg_pubkeyfileexport }}"
  become: yes
  become_user: "{{ caur_sign_user }}"
  changed_when: false
  when: gpgkeys is defined and not gpgkeys.stdout
- name: Fetch the output files to buffer
  fetch:
    dest: "{{ gpg_pulldir }}"
    flat: yes
    src: "{{ item }}"
  with_items:
    - "{{ caur_sign_user_home }}/{{ gpg_pubkeyfileexport }}"
    - "{{ caur_sign_user_home }}/{{ gpg_fingerprint }}"
  when: gpgkeys is defined and not gpgkeys.stdout and gpg_pull | default(false) == true
- name: Fetch privatekey to the buffer
  fetch:
    dest: "{{ gpg_pulldir }}"
    flat: yes"
    src: "{{ item }}"
  with_items:
    - "{{ caur_sign_user_home }}/{{ gpg_privkeyfile }}"
  when: gpg_pull | default(false) == true and gpg_pull_privatekey | default(false) == true
