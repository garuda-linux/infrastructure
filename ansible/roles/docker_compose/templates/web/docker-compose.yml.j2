version: "3.9"
services:
  # Webserver - reverse proxying all the other containers
  nginx:
    image: macbre/nginx-http3:latest
    container_name: nginx
    volumes:
      - "./letsencrypt/etc:/etc/letsencrypt:ro"
      - "./nginx/conf.d:/etc/nginx/conf.d/:ro"
      - "./nginx/configs:/etc/nginx/configs:ro"
      - "./nginx/goaccess:/usr/share/nginx/html/logs:ro"
      - "./nginx/logs/:/var/log/nginx:rw"
      - "./nginx/nginx.conf:/etc/nginx/nginx.conf:ro"
      - "./nginx/ssl/dhparam.pem:/etc/nginx/ssl/dhparam.pem:ro"
      - "./nginx/www:/usr/share/nginx/html/www:ro"
      - "./website:/usr/share/nginx/html/website:ro"
    ports:
      - 80:80
      - 443:443
      - 443:443/udp
    mem_limit: 1000m
    mem_reservation: 200m
    cpus: 2.0
    restart: always
    labels:
      com.datadoghq.ad.check_names: '["nginx"]'
      com.datadoghq.ad.init_configs: "[{}]"

  # SSL certs
  certbot:
    image: certbot/dns-cloudflare:latest
    container_name: certbot
    volumes:
      - "./letsencrypt/etc:/etc/letsencrypt"
      - "./letsencrypt/var:/var/lib/letsencrypt"
    entrypoint: "/bin/sh -c 'trap exit TERM; sleep 10; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    mem_limit: 50m
    cpus: 0.1
    restart: always

  # Garuda wiki
  wikijs_app:
    image: requarks/wiki:latest
    container_name: wikijs_app
    depends_on:
      - postgres
    volumes:
      - "./wikijs/assets:/wiki/assets/favicons"
    environment:
      DB_TYPE: {{ db_type }}
      DB_HOST: {{ db_host }}
      DB_PORT: {{ db_port }}
      DB_USER: {{ db_user }}
      DB_PASS: {{ db_pass }}
      DB_NAME: {{ db_name }}
    restart: always

  # Privacy friendly analytics
  matomo_db:
    image: mariadb:latest
    container_name: matomo_db
    command: --max-allowed-packet=64MB
    restart: always
    volumes:
      - "./matomo/db:/var/lib/mysql"
    environment:
      MYSQL_ROOT_PASSWORD: {{ mysql_root_password }}

  matomo_app:
    image: matomo:latest
    container_name: matomo_app
    depends_on:
      - matomo_db
    restart: always
    volumes:
      - "./matomo/config:/var/www/html/config"
      - "./matomo/logs:/var/www/html/logs"
      - "./matomo/www:/var/www/html"
    environment:
      MYSQL_PASSWORD: {{ mysql_password }}
      MYSQL_DATABASE: {{ mysql_database }}
      MYSQL_USER: {{ mysql_user }}
      MATOMO_DATABASE_ADAPTER: {{ mysql_database_adapter }}
      MATOMO_DATABASE_TABLES_PREFIX: {{ matomo_database_tables_prefix }}
      MATOMO_DATABASE_USERNAME: {{ matomo_database_username }}
      MATOMO_DATABASE_PASSWORD: {{ matomo_database_password }}
      MATOMO_DATABASE_DBNAME: {{ matomo_database_dbname }}

  # Matrix homeserver
  matrix:
    image: matrixdotorg/synapse:latest
    container_name: matrix
    depends_on:
      - postgres
    restart: always
    volumes:
      - "./matrix/matrix:/data"
      - "./matrix/mautrix-telegram/registration.yaml:/mautrix-registration.yaml"
      - "./matrix/matrix-irc/appservice-registration-irc.yaml:/irc-registration.yaml"
      - "./matrix/matrix-discord/discord-registration.yaml:/discord-registration.yaml"

  # Matrix Web client
  matrix_web:
    image: vectorim/element-web
    container_name: element_web
    depends_on:
      - matrix
    volumes:
      - "./matrix/element_web/config.json:/app/config.json"
    restart: always

  # Admin interface for matrix
  matrix_admin:
    image: awesometechnologies/synapse-admin:latest
    container_name: matrix_admin
    depends_on:
      - matrix
    restart: unless-stopped

  # Matrix to IRC/Discord/Telegram relay
  matterbridge:
    image: 42wim/matterbridge:stable
    container_name: matterbridge
    depends_on:
      - matrix
    volumes:
      - "./matterbridge.toml:/etc/matterbridge/matterbridge.toml:ro"
    restart: unless-stopped

  # Wikijs / Matrix database
  postgres:
    image: postgres:14-alpine
    container_name: postgres
    environment:
      POSTGRES_PASSWORD: {{ postgres_password }}
      POSTGRES_USER: {{ postgres_user }}
    volumes:
      - "./postgres/:/var/lib/postgresql/data"
    restart: always

  # Private network
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    command: tunnel run
    user: root
    volumes:
      - "./cloudflared:/root/.cloudflared"
    mem_limit: 50m
    mem_reservation: 10m
    cpus: 0.2
    restart: always
