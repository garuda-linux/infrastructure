version: "3.9"
services:
  # Webserver
  nginx:
    image: nginx:alpine-perl
    container_name: nginx
    volumes:
      - "./buildiso/iso:/var/lib/nginx/html/builds/iso:rw"
      - "./buildiso/logs:/var/lib/nginx/html/builds/iso/logs:ro"
      - "./letsencrypt/etc:/etc/letsencrypt:ro"
      - "./nginx.conf:/etc/nginx/nginx.conf:ro"
      - "./conf.d:/etc/nginx/conf.d:ro"
    labels:
      com.datadoghq.ad.check_names: '["nginx"]'
      com.datadoghq.ad.init_configs: "[{}]"
      com.datadoghq.ad.instances: '[{"nginx_status_url": "http://%%host%%:81/nginx_status/"}]'
    ports:
      - "80:80"
      - "443:443"
    mem_limit: 500m
    mem_reservation: 200m
    cpus: 2.0
    restart: always

  # Letsencrypt SSL certificates
  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    volumes:
      - "./letsencrypt/etc:/etc/letsencrypt"
      - "./letsencrypt/var:/var/lib/letsencrypt"
    entrypoint: "/bin/sh -c 'trap exit TERM; sleep 10; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    mem_limit: 50m
    cpus: 0.1
    restart: always

  # Centralized logging
  datadoghq:
    image: datadog/agent:latest
    container_name: dd-agent
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/proc/:/host/proc/:ro"
      - "/sys/fs/cgroup/:/host/sys/fs/cgroup:ro"
    environment:
      DD_API_KEY: {{ dd_api_key }}
      DD_SITE: {{ dd_site }}
      DD_LOGS_ENABLED: {{ dd_logs_enabled }}
      DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL: {{ dd_logs_config_container_collect_all }}
      DD_PROCESS_AGENT_ENABLED: {{ dd_process_agent_enabled }}
    mem_limit: 300m
    mem_reservation: 200m
    cpus: 0.2
    restart: unless-stopped

  # Garuda iso autobuilder
  garuda-iso-autobuild:
    build: ./buildiso
    image: garuda-tools-iso:latest
    container_name: garuda-iso-autobuild
    privileged: true
    command: auto
    volumes:
      - "./buildiso/cache/buildiso:/var/cache/garuda-tools/garuda-chroots/buildiso"
      - "./buildiso/cache/anacron:/var/spool/anacron"
      - "/var/cache/pacman/pkg/:/var/cache/pacman/pkg/"
      - "./buildiso/iso:/var/cache/garuda-tools/garuda-builds/iso/"
      - "./buildiso/logs:/var/cache/garuda-tools/garuda-logs/"
      - "./id_ed25519:/root/.ssh/id_ed25519"
    environment:
      TELEGRAM: {{ telegram }}
      ISO-TYPE: {{ iso_type }}
    restart: always

  # Netdata
  netdata:
    image: netdata/netdata:latest
    container_name: netdata
    hostname: garuda-iso
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - ./netdata/config:/etc/netdata
      - ./netdata/lib:/var/lib/netdata
      - ./netdata/cache:/var/cache/netdata
      - /etc/group:/host/etc/group:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /etc/passwd:/host/etc/passwd:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      NETDATA_CLAIM_TOKEN: {{ netdata_claim_token }}
      NETDATA_CLAIM_URL: {{ netdata_claim_url }}
    mem_limit: 300m
    mem_reservation: 100m
    cpus: 0.3
    restart: unless-stopped

  # Deepfence
  deepfence_agent_ce:
    image: deepfenceio/deepfence_agent_ce:latest
    container_name: deepfence-agent
    pid: host
    network_mode: host
    privileged: true
    volumes:
      - "/sys/kernel/debug:/sys/kernel/debug:rw"
      - "./deepfence/logs:/var/log/fenced"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "/:/fenced/mnt/host/:ro"
    environment:
      USER_DEFINED_TAGS: {{ df_user_defined_tags }}
      MGMT_CONSOLE_URL: {{ df_mgmt_console_url }}
      MGMT_CONSOLE_PORT: {{ df_mgmt_console_port }}
      DEEPFENCE_KEY: {{ df_key }}
    mem_limit: 650m
    mem_reservation: 10m
    cpus: 0.2
    restart: unless-stopped

# certbot init
# sudo docker run -p 80:80 -p 443:443 -it --rm -v "/var/cache/garuda-iso/letsencrypt/etc:/etc/letsencrypt" -v "/var/cache/garuda-iso/letsencrypt/var:/var/lib/letsencrypt" certbot/certbot certonly --standalone --agree-tos -n -m "team@garudalinux.org" -d "iso.builds.garudalinux.org"
