services:
  # Reddit frontend
  libreddit:
    image: spikecodes/libreddit:latest
    container_name: libreddit
    environment:
      LIBREDDIT_DEFAULT_AUTOPLAY_VIDEOS: {{ libreddit_default_autoplay_videos }}
      LIBREDDIT_DEFAULT_FRONT_PAGE: {{ libreddit_default_front_page }}
      LIBREDDIT_DEFAULT_SHOW_NSFW: {{ libreddit_default_show_nsfw }}
      LIBREDDIT_DEFAULT_THEME: {{ libreddit_default_theme }}
      LIBREDDIT_DEFAULT_USE_HLS: {{ libreddit_default_use_hls }}
    ports:
      - "8080:8080"
    mem_limit: 256m
    memswap_limit: 256m
    restart: always

  # Twitter frontend
  nitter:
    image: zedeus/nitter:latest
    container_name: nitter
    volumes:
      - ./nitter/nitter.conf:/src/nitter.conf:ro
    mem_limit: 256m
    memswap_limit: 256m
    ports:
      - "8888:8888"
    depends_on:
      - nitter_redis
    restart: always
    healthcheck:
      test: wget -nv --tries=1 --spider http://127.0.0.1:8080/Jack/status/20 || exit 1
      interval: 30s
      timeout: 5s
      retries: 2

  nitter_redis:
    image: redis:6-alpine
    container_name: nitter_redis
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - ./nitter/redis:/data
    mem_limit: 256m
    memswap_limit: 256m
    restart: always
    healthcheck:
      test: redis-cli ping
      interval: 30s
      timeout: 5s
      retries: 2

  # Bibliogram
  bibliogram:
    image: quay.io/pussthecatorg/bibliogram:latest
    container_name: bibliogram
    volumes:
     # - "./bibliogram/config.js:/app/config.js"
      - "./bibliogram/db:/app/db"
    mem_limit: 256m
    memswap_limit: 256m
    ports:
      - "10407:10407"
    restart: always


  # Lingva
  lingva:
    image: thedaviddelta/lingva-translate:latest
    container_name: lingva
    environment:
      DARK_THEME: {{ lingva_dark_theme }}
      DEFAULT_SOURCE_LANG: {{ lingva_source_lang }}
      DEFAULT_TARGET_LANG: {{ lingva_target_lang }}
      SITE_DOMAIN: {{ lingva_site_domain }}
    ports:
      - "3000:3000"
    restart: always

  # Teddit
  teddit:
    image: teddit/teddit:latest
    container_name: teddit
    environment:
      REDIS_HOST: teddit_redis
    ports:
      - "8081:8080"
    mem_limit: 256m
    memswap_limit: 256m
    healthcheck:
      test: ["CMD", "wget" ,"--no-verbose", "--tries=1", "--spider", "http://localhost:8080/about"]
      interval: 1m
      timeout: 3s
    environment:
      DOMAIN: {{ teddit_domain }}
      REDIS_HOST: {{ teddit_redis_host }}
      THEME: {{ teddit_theme }}
      TRUST_PROXY: {{ teddit_trust_proxy }}
    depends_on:
      - teddit_redis
    restart: always

  teddit_redis:
    image: redis:6.2.5-alpine
    container_name: teddit_redis
    command: redis-server
    mem_limit: 256m
    memswap_limit: 256m
    environment:
      REDIS_REPLICATION_MODE: master
    restart: always

  invidious:
    image: quay.io/invidious/invidious:latest
    container_name: invidious
    environment:
      INVIDIOUS_CONFIG: |
        db:
          dbname: {{ invidious_db }}
          user: {{ invidious_db_user }}
          password: {{ invidious_db_password }}
          host: {{ invidious_db_host }}
          port: 5432
        check_tables: true
        default_user_preferences:
          local: true
          quality: dash
        disable_proxy: ["livestreams","downloads"]
        use_quic: true
        admins: ["nico"]
        https_only: true
        use_pubsub_feeds: true
        popular_enabled: true
        hmac_key: {{ invidious_hmac_key }}
        domain: invidious.garudalinux.org
        statistics_enabled: true
        captcha_key: {{ invidious_captcha_key }}
    ports:
      - "3001:3000"
    healthcheck:
      test: wget -nv --tries=1 --spider http://127.0.0.1:3000/api/v1/comments/jNQXAC9IVRw || exit 1
      interval: 30s
      timeout: 5s
      retries: 2
    restart: always
    depends_on:
      - invidious_db

  invidious_db:
    image: docker.io/library/postgres:14
    container_name: invidious_db
    volumes:
      - ./invidious/db:/var/lib/postgresql/data
      - ./invidious/config:/config/sql
      - ./invidious/init-invidious-db.sh:/docker-entrypoint-initdb.d/init-invidious-db.sh
    environment:
      POSTGRES_DB: {{ invidious_db }}
      POSTGRES_USER: {{ invidious_db_user }}
      POSTGRES_PASSWORD: {{ invidious_db_password }}
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
